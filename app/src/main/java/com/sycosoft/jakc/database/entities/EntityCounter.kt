package com.sycosoft.jakc.database.entities

import androidx.room.ColumnInfo
import androidx.room.Entity
import androidx.room.PrimaryKey
import com.sycosoft.jakc.utils.CounterType

/**
 * Represents the Counter entity in the database.
 *
 * @param id The unique identifier for the counter. (This is autogenerated by the database upon insertion.)
 * @param name The name of the counter.
 * @param description The description for the counter. (Optional)
 * @param currentValue The current value of the counter.
 * @param incrementBy The amount to increment or decrement the counter by each time it's edited.
 * @param type The type of counter this is.
 * @param isGloballyLinked Whether this counter is linked to the global counter.
 * @param resetRow The row to reset the counter to 0. When set to 0, this is ignored.
 * @param maxResets The maximum number of times the counter can be reset. When [resetRow] or this is set to 0, it's ignored.
 * @param currentResets The current number of resets the counter has been made. When [resetRow] is set to 0, this is not incremented.
 * @param owningPartId The id of the part this counter belongs to.
 *
 * @throws IllegalArgumentException if the name is set to blank.
 * @throws IllegalArgumentException if name is longer than [NAME_LENGTH] characters
 *
 * @see [CounterType] for list of available counter types.
 *
 * @author Jamie-Rhys Edwards
 * @since v0.0.1
 */
@Entity(tableName = "counters")
data class EntityCounter(
    @PrimaryKey(autoGenerate = true) val id: Long = 0,
    @ColumnInfo(name = "name") val name: String,
    @ColumnInfo(name = "description") val description: String = "",
    @ColumnInfo(name = "current_value") val currentValue: Long = 0,
    @ColumnInfo(name = "increment_by") val incrementBy: Long = 1,
    @ColumnInfo(name = "type") val type: CounterType = CounterType.Normal,
    @ColumnInfo(name = "is_globally_linked") val isGloballyLinked: Boolean = true,
    @ColumnInfo(name = "reset_row") val resetRow: Long = 0,
    @ColumnInfo(name = "max_resets") val maxResets: Long = 0,
    @ColumnInfo(name = "current_resets") val currentResets: Long = 0,
    @ColumnInfo(name = "owning_part_id") val owningPartId: Long,
) {
    companion object {
        const val NAME_LENGTH = 50
    }

    class ExceptionMessages {
        companion object {
            const val NAME_CANNOT_BE_BLANK = "Counter name cannot be blank"
            const val NAME_TOO_LONG =
                "Counter name cannot be more than $NAME_LENGTH characters long"
        }
    }

    init {
        require(name.isNotBlank()) { ExceptionMessages.NAME_CANNOT_BE_BLANK }
        require(name.length < NAME_LENGTH) { ExceptionMessages.NAME_TOO_LONG }
    }
}
