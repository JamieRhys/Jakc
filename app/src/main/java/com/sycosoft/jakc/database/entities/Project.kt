package com.sycosoft.jakc.database.entities

import androidx.annotation.NonNull
import androidx.room.ColumnInfo
import androidx.room.Entity
import androidx.room.PrimaryKey
import androidx.room.TypeConverters
import com.sycosoft.jakc.database.converters.LocalDateConverter
import com.sycosoft.jakc.utils.ProjectType
import java.time.LocalDate

/**
 * Represents the Project entity in the database.
 *
 * @param id The unique identifier for the project. (This is autogenerated by the database upon insertion.)
 * @param name The name of the project.
 * @param description A description of the project (optional).
 * @param dateCreated The date the project was created. (Defaults to the current date.)
 * @param timeTaken The total time taken to complete the project (in milliseconds). This is user toggleable.
 * @param dateCompleted The date the project was completed (optional and user toggleable).
 * @param isComplete Whether the project is complete or not. This is tied to [dateCompleted].
 * @param type The type of project this is.
 *
 * @throws IllegalArgumentException if the name is set to blank.
 *
 * @see [ProjectType]
 *
 * @author Jamie-Rhys Edwards
 * @since 0.0.1
 */
@Entity(tableName = "projects")
@TypeConverters(LocalDateConverter::class)
data class Project(
    @PrimaryKey(autoGenerate = true) private val id: Long = 0,
    @ColumnInfo(name = "name") private var name: String,
    @ColumnInfo(name = "description") private var description: String = "",
    @ColumnInfo(name = "date_created") private val dateCreated: LocalDate = LocalDate.now(),
    @ColumnInfo(name = "time_taken") private var timeTaken: Long = 0,
    @ColumnInfo(name = "date_completed") private var dateCompleted: LocalDate? = null,
    @ColumnInfo(name = "is_complete") private var isComplete: Boolean = false,
    @ColumnInfo(name = "type") private var type: ProjectType = ProjectType.Knitting,
) {
    class ExceptionMessages {
        companion object {
            const val NAME_CANNOT_BE_BLANK = "Name cannot be blank"
        }
    }
    init {
        require(name.isNotBlank()) { ExceptionMessages.NAME_CANNOT_BE_BLANK }
    }

    /**
     * Returns the unique identifier for the project (Autogenerated by the database upon insertion).
     */
    fun id() = id

    /**
     * Returns the name of the project.
     */
    fun name() = name

    /**
     * Sets the name of the project to the name provided.
     *
     * @param name The new name of the project.
     *
     * @throws IllegalArgumentException if the name that's passed in is blank.
     *
     */
    fun name(name: String) {
        if (name.isNotBlank()) {
            this.name = name
        } else {
            throw IllegalArgumentException(ExceptionMessages.NAME_CANNOT_BE_BLANK)
        }
    }

    /**
     * Returns the description of the project.
     */
    fun description() = description

    /**
     * Sets the description of the project to the description provided.
     */
    fun description(description: String) { this.description = description }

    /**
     * Returns the date the project was created.
     */
    fun dateCreated() = dateCreated

    /**
     * Returns the current time the user has spent on the project.
     */
    fun timeTaken() = timeTaken

    /**
     * Sets the time the user has spent on the project so far.
     */
    fun timeTaken(timeTaken: Long) { this.timeTaken = timeTaken }

    /**
     * Returns the date the project was completed. Null if it hasn't been completed yet.
     */
    fun dateCompleted() = dateCompleted

    /**
     * Sets the date the project was completed.
     *
     * @param dateCompleted The date the project was completed.
     */
    fun dateCompleted(dateCompleted: LocalDate) { this.dateCompleted = dateCompleted }

    /**
     * Returns whether the project is complete or not. False if it hasn't been completed yet. True if
     * it has been completed.
     */
    fun isComplete() = isComplete

    /**
     * Sets whether the project is complete or not. If set to true, you should also set the dateCompleted
     * property to the date the project was completed.
     *
     * @param isComplete Whether the project is complete or not.
     */
    fun isComplete(isComplete: Boolean) { this.isComplete = isComplete }

    /**
     * Returns the project type.
     *
     * @see [ProjectType]
     */
    fun type() = type

    /**
     * Sets the project type.
     *
     * @param type The project type to set to.
     *
     * @see [ProjectType]
     */
    fun type(type: ProjectType) { this.type = type }
}