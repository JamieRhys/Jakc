package com.sycosoft.jakc.database.entities

import androidx.room.ColumnInfo
import androidx.room.Entity
import androidx.room.PrimaryKey

/**
 * Represents a Part in the database.
 *
 * @param id The unique identifier for this part. (This is autogenerated by the database upon insertion.)
 * @param name The name of the part.
 * @param description A description of what the part is for. (optional)
 * @param owningProjectId The id of the project this part belongs to.
 * @param isCurrent Whether this part is the current part being worked on by the user. (Only one part can be current at any one time.
 * @param isComplete Whether this part is complete.
 *
 * @throws IllegalArgumentException if the name is set to blank.
 * @throws IllegalArgumentException if the name is longer than [NAME_LENGTH].
 *
 * @see [Project]
 *
 * @author Jamie-Rhys Edwards
 * @since 0.0.1
 */
@Entity(tableName = "parts")
data class EntityPart(
    @PrimaryKey(autoGenerate = true) val id: Long = 0,
    @ColumnInfo(name = "name") val name: String,
    @ColumnInfo(name = "description") val description: String = "",
    @ColumnInfo(name = "owning_project_id") val owningProjectId: Long,
    @ColumnInfo(name = "is_current") val isCurrent: Boolean = false,
    @ColumnInfo(name = "is_complete") val isComplete: Boolean = false,
) {
    companion object {
        const val NAME_LENGTH = 50
    }

    class ExceptionMessages {
        companion object {
            const val NAME_CANNOT_BE_BLANK = "Part name cannot be blank"
            const val NAME_TOO_LONG = "Part name cannot be more than $NAME_LENGTH characters long"
        }
    }

    init {
        require(name.isNotBlank()) { ExceptionMessages.NAME_CANNOT_BE_BLANK }
        require(name.length <= NAME_LENGTH) { ExceptionMessages.NAME_TOO_LONG }
    }
}