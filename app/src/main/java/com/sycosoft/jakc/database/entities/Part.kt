package com.sycosoft.jakc.database.entities

import androidx.room.ColumnInfo
import androidx.room.Entity
import androidx.room.PrimaryKey

/**
 * Represents a Part in the database.
 *
 * @param id The unique identifier for this part. (This is autogenerated by the database upon insertion.)
 * @param name The name of the part.
 * @param description A description of what the part is for. (optional)
 * @param owningProjectId The id of the project this part belongs to.
 * @param isCurrent Whether this part is the current part being worked on by the user. (Only one part can be current at any one time.
 *
 * @see [Project]
 *
 * @author Jamie-Rhys Edwards
 * @since 0.0.1
 */
@Entity(tableName = "parts")
data class Part(
    @PrimaryKey(autoGenerate = true) private val id: Long = 0,
    @ColumnInfo(name = "name") private var name: String,
    @ColumnInfo(name = "description") private var description: String = "",
    @ColumnInfo(name = "owning_project_id") private val owningProjectId: Long,
    @ColumnInfo(name = "is_current") private var isCurrent: Boolean = false,
) {
    class ExceptionMessages {
        companion object {
            const val NAME_CANNOT_BE_BLANK = "Name cannot be blank"
        }
    }

    init {
        require(name.isNotBlank()) { ExceptionMessages.NAME_CANNOT_BE_BLANK }
    }

    /**
     * Returns the unique identifier for this part.
     */
    fun id() = id

    /**
     * Returns the name of the part.
     */
    fun name() = name

    /**
     * Sets the name of the part to the name provided.
     *
     * @param name The name of the part to be changed to.
     *
     * @throws IllegalArgumentException if the name that's passed in is blank.
     *
     */
    fun name(name: String) {
        if (name.isNotBlank()) {
            this.name = name
        } else {
            throw IllegalArgumentException(ExceptionMessages.NAME_CANNOT_BE_BLANK)
        }
    }

    /**
     * Returns the description of the part.
     */
    fun description() = description

    /**
     * Sets the description of the part to the description provided.
     *
     * @param description The description of the part to be changed to.
     */
    fun description(description: String) { this.description = description }

    /**
     * Returns the id of the project this part belongs to.
     */
    fun owningProjectId() = owningProjectId

    /**
     * Returns whether this part is the current part being worked on by the user.
     */
    fun isCurrent() = isCurrent

    /**
     * Sets whether this part is the current part being worked on by the user.
     */
    fun isCurrent(isCurrent: Boolean) { this.isCurrent = isCurrent }
}