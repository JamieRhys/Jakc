package com.sycosoft.jakc.database.entities

import androidx.room.ColumnInfo
import androidx.room.Entity
import androidx.room.PrimaryKey
import androidx.room.TypeConverters
import com.sycosoft.jakc.database.converters.LocalDateConverter
import com.sycosoft.jakc.utils.ProjectType
import java.time.LocalDate

/**
 * Represents the Project entity in the database.
 *
 * @param id The unique identifier for the project. (This is autogenerated by the database upon insertion.)
 * @param name The name of the project.
 * @param description A description of the project (optional).
 * @param dateCreated The date the project was created. (Defaults to the current date.)
 * @param timeTaken The total time taken to complete the project (in milliseconds). This is user toggleable.
 * @param dateCompleted The date the project was completed (optional and user toggleable).
 * @param isComplete Whether the project is complete or not. This is tied to [dateCompleted].
 * @param type The type of project this is.
 *
 * @throws IllegalArgumentException if the name is set to blank.
 * @throws IllegalArgumentException if name is longer than [NAME_LENGTH] characters
 *
 * @see [ProjectType]
 *
 * @author Jamie-Rhys Edwards
 * @since 0.0.1
 */
@Entity(tableName = "projects")
@TypeConverters(LocalDateConverter::class)
data class EntityProject(
    @PrimaryKey(autoGenerate = true) val id: Long = 0,
    @ColumnInfo(name = "name") val name: String,
    @ColumnInfo(name = "description") val description: String = "",
    @ColumnInfo(name = "date_created") val dateCreated: LocalDate = LocalDate.now(),
    @ColumnInfo(name = "time_taken") val timeTaken: Long = 0,
    @ColumnInfo(name = "date_completed") val dateCompleted: LocalDate? = null,
    @ColumnInfo(name = "is_complete") val isComplete: Boolean = false,
    @ColumnInfo(name = "type") val type: ProjectType = ProjectType.Knitting,
) {
    companion object {
        const val NAME_LENGTH = 50
    }

    class ExceptionMessages {
        companion object {
            const val NAME_CANNOT_BE_BLANK = "Project name cannot be blank"
            const val NAME_TOO_LONG = "Project name cannot be more than $NAME_LENGTH characters long"
        }
    }

    init {
        require(name.isNotBlank()) { ExceptionMessages.NAME_CANNOT_BE_BLANK }
        require(name.length <= NAME_LENGTH) { ExceptionMessages.NAME_TOO_LONG }
    }
}
